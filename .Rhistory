median.signature <- median(clinical$signature_MAPK)
high.signature <- clinical$signature_MAPK >= median.signature
clinical$signature_group <- "low"
clinical$signature_group[high.signature] <- "high"
anno.columns <- clinical[,c("known.oncogenes","pathologic_stage","gender","signature_group")]
row.names(anno.columns) <- clinical$sampleID
# For the pathological stage we want only 4 stages, we need to to remove sub categories A and B
anno.columns$pathologic_stage <- sub("[AB]$","",anno.columns$pathologic_stage)
# create a list containing the colors for each feature
colors.anno <- list(known.oncogenes=palette.known.onco,
pathologic_stage=c("Stage I"=colours()[404], "Stage II"=colours()[33], "Stage III"=colours()[35], "Stage IV"=colours()[24]),
gender=c(FEMALE=colours()[613], MALE=colours()[290]),
signature_group=c(high=colours()[124],low=colours()[144]))
# Create annotation for the rows containing the genes:
# we want to indcate the genes involved in the signature
anno.rows <- data.frame(row.names=row.names(luad_expr),in.signature=ifelse(row.names(luad_expr)%in%gene.of.interest,"yes","no"))
colors.anno$in.signature <- c(yes="black",no="white")
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 3, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 4, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 5, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 6, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
View(clinical_data)
View(clinical_data)
View(clinical_data)
pi
a <- 10+10
a
b <- "10+10"
b
TCGA_LUAD <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", row.names=1, stringsAsFactors=FALSE)
View(TCGA_LUAD)
print(TCGA_LUAD)
TCGA_LUAD <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", row.names=NULL, stringsAsFactors=FALSE)
View(TCGA_LUAD)
View(TCGA_LUAD)
rm(TCGA_LUAD)
TCGA_LUAD <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", row.names=1, stringsAsFactors=FALSE)
View(TCGA_LUAD)
TCGA_LUAD[0,]
TCGA_LUAD[,0]
TCGA_LUAD[,1]
TCGA_LUAD[1,]
TCGA_LUAD[1,0]
TCGA_LUAD[1,10000000000]
TCGA_LUAD[1,ncol(TCGA_LUAD)]
View(TCGA_LUAD)
View(TCGA_LUAD)
View(TCGA_LUAD)
View(TCGA_LUAD)
install.packages("writexl")
library(writexl)
library(readr)
write.table(TCGA_LUAD, file = "TCGA_LUAD")
write.table(TCGA_LUAD, file = "TCGA_LUAD", row.names = 1)
library(readr)
clinical_data <- read_csv("datasets/clinical_data.csv")
View(clinical_data)
clinical_data %>% filter(gender == "MALE") %>% filter(height >= 175)
library(tidyverse)
clinical_data %>% filter(gender == "MALE") %>% filter(height >= 175)
clinical_data %>% filter(gender == "FEMALE") %>% filter(height >= 175)
v1 <- clinical_data %>% filter(gender == "FEMALE") %>% filter(height >= 175)
v1 <- clinical_data %>% filter(gender == "Female") %>% filter(height >= 175)
v2 <- clinical_data %>% filter(gender == "FEMALE") %>% filter(height >= 175)
View(v1)
42
2+3
"2+3"
ggplot()
library(ggplot2)
ggplot()
clinical <- read.table("datasets/clinical_data.csv",sep=",",head=T)
colnames(clinical)
library(ggplot2)
View(clinical)
ggplot(data = clinical, aes(x = glucose)) +
geom_density(aes(color = diagnosis)) +
labs(x = "Glucose (mg/dL)")
ggplot(data = clinical, aes(x = glucose)) +
geom_density(aes(color = diagnosis)) +
labs(x = "Glucose (mg/dL)") +
# We use the function c(), to name the elements of a vector you use the name you want
# and you assign the values with the sign =
palette.disease <- c("Diabetes"=colours()[144],
"Heart Disease"=colours()[34],
"Hypertension"=colours()[613],
"No Disease"=colours()[24])
# We use the function c(), to name the elements of a vector you use the name you want
# and you assign the values with the sign =
palette.disease <- c("Diabetes"=colours()[144],
"Heart Disease"=colours()[34],
"Hypertension"=colours()[613],
"No Disease"=colours()[24])
# Display the content
palette.disease
ggplot(data = clinical, mapping = aes(x=diagnosis, y=glucose)) +
geom_density(aes(color=diagnosis)) +
labs(x="Glucose (mg/dL)") +
theme_bw() +
scale_color_manual(values = palette.disease)+
theme(aspect.ratio = 1/2)
ggplot(data = clinical, mapping = aes(x=glucose)) +
geom_density(aes(color=diagnosis)) +
labs(x="Glucose (mg/dL)") +
theme_bw() +
scale_color_manual(values = palette.disease)+
theme(aspect.ratio = 1/2)
colnames(clinical)
View(clinical)
ggplot(data = clinical, aes(x = treatment_response)) +
geom_bar(aes(color = treatment_response, fill = treatment_response, alpha = smoking_status)) +
labs(x = "Outcomes") +
theme_bw() +
scale_color_manual(values = c(Worsened = "red", No Change = "darkgrey", Improved = "forestgreen")) +
ggplot(data = clinical, aes(x = treatment_response)) +
geom_bar(aes(color = treatment_response, fill = treatment_response, alpha = smoking_status)) +
labs(x = "Outcomes") +
theme_bw() +
scale_color_manual(values = c(Worsened = "red", "No Change" = "darkgrey", Improved = "forestgreen")) +
scale_fill_manual(values = c(Worsened = "red", "No Change" = "darkgrey", Improved = "forestgreen")) +
coord_flip() +
theme(aspect.ratio = 2)
ggplot(data = clinical, aes(x=treatment_response)) +
geom_bar(aes(fill=treatment_response, color=treatment_response,alpha=smoking_status), position = "fill") +
labs(x="Outcomes") +
theme_bw() +
scale_fill_manual(values=c(Worsened="red","No Change"="darkgrey",Improved=colours()[613])) +
scale_colour_manual(values=c(Worsened="red","No Change"="darkgrey",Improved=colours()[613])) +
coord_flip() +
theme(aspect.ratio = 2)
qual.features <- clinical %>% select(!where(is.numeric))
library(tidyverse)
qual.features <- clinical %>% select(!where(is.numeric))
View(qual.features)
head(qual.features)
View(qual.features)
pivot_longer()
pivot_longer(clinical)
clinical <- clinical_long %>% pivot_longer(!smoking_status, "features", "values")
clinical_long <- clinical %>% pivot_longer(!smoking_status, "features", "values")
clinical_long <- qual.features %>% pivot_longer(!smoking_status, "features", "values")
clinical_long <- pivot_longer(qual.features, !smoking_status, "features", "values")
clinical_long <- pivot_longer(qual.features, "features", "values")
qual.features_long <- qual.features %>% pivot_longer()
qual.features_long <- qual.features %>% pivot_longer(cols = c(gender, diagnosis, treatment_group, treatment_response), names_to = "features", values_to = "values")
View(qual.features_long)
qual.features_long2 <- qual.features %>% pivot_longer(cols = !smoking_status, names_to = "features", values_to = "values")
View(qual.features_long2)
qual.features_long3 <- qual.features %>% relocate(smoking_status, .before = gender) %>% pivot_longer(cols = gender:treatment_response, names_to = "features", values_to = "values")
ggplot(qual.features_long, aes(x=values)) +
geom_bar(aes(alpha = smoking_status, color = values, fill = values), position = "fill") +
theme_bw()+
facet_wrap(~features)
ggplot(qual.features.long,aes(x=values)) +
theme_bw() +
geom_bar(aes(alpha=smoking_status, color=values, fill=values), position="fill") +
facet_wrap(~features,scales="free")
ggplot(qual.features_long,aes(x=values)) +
theme_bw() +
geom_bar(aes(alpha=smoking_status, color=values, fill=values), position="fill") +
facet_wrap(~features,scales="free")
luad_clinical <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", stringsAsFactors=FALSE)
View(luad_clinical)
luad_expr <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_expression.tsv", row.names=1, stringsAsFactors=FALSE)
View(luad_expr)
luad_clinical <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", row.names=1, stringsAsFactors=FALSE)
View(luad_clinical)
palette.known.onco <- c(ALK="darkgrey",
BRAF_act=colours()[613],
BRAF.non=colours()[11],
EGFR=colours()[128],
ERBB2=colours()[76],
MAP2K1=colours()[509],
MET=colours()[121],
NF1=colours()[468],
None=colours()[92],
RIT1=colours()[642],
ROS1=colours()[34],
KRAS="black")
ggplot(data = luad_clinical, aes(x=known.oncogenes)) +
geom_bar(aes(fill=known.oncogenes)) +
labs(x="Known Oncogenes") +
theme_bw() +
scale_fill_manual(values=palette.known.onco) +
coord_flip() +
theme(aspect.ratio = 2)
ggplot(data = luad_clinical, aes(x=known.oncogenes)) +
geom_bar(aes(fill=known.oncogenes)) +
labs(x="Known Oncogenes") +
theme_bw() +
scale_fill_manual(values=palette.known.onco)
ggplot(data = luad_clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
geom_boxplot(aes(color=known.oncogenes)) +
labs(x="Known Oncogenes", y="MAPK activity signature") +
theme_bw() +
scale_colour_manual(values=palette.known.onco) +
coord_flip() +
geom_jitter(aes(color=known.oncogenes)) +
geom_hline(yintercept = median(luad_clinical$signature_MAPK), linewidth=0.3, linetype="dashed")
mapk_activity_per_oncogenes <- luad_clinical %>% group_by(known.oncogenes) %>%
summarize(mapk_sd_low=mean(signature_MAPK)-sd(signature_MAPK),
mapk_mean=mean(signature_MAPK),
mapk_sd_high=mean(signature_MAPK)+sd(signature_MAPK))
ggplot(data = mapk_activity_per_oncogenes, aes(x=known.oncogenes, y=mapk_mean)) +
geom_col(aes(fill=known.oncogenes, color=known.oncogenes),alpha=0.5) +
geom_errorbar(aes(ymin=mapk_sd_low,ymax=mapk_sd_high, color=known.oncogenes),width = 0.25) +
labs(x="Known Oncogenes", y="Average MAPK activity signature") +
theme_bw() +
scale_fill_manual(values=palette.known.onco) +
scale_colour_manual(values=palette.known.onco) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
phospho.expression <- luad_expr[c("DUSP4","DUSP6","SPRY2"),]
phospho.expression <- t(phospho.expression)
phospho.expression <- as.data.frame(phospho.expression)
phospho.expression$sampleID <- row.names(phospho.expression)
View(phospho.expression)
luad_clinical <- merge(luad_clinical,phospho.expression, by="sampleID")
luad_clinical.genes <- luad_clinical %>% select(starts_with("DUSP"),SPRY2,signature_MAPK)
View(luad_clinical.genes)
M <- cor(luad_clinical.genes)
corrplot.mixed(M, order = 'AOE',lower.col = COL2("BrBG"),upper.col = COL2("BrBG"))
library(corrplot)
M <- cor(luad_clinical.genes)
corrplot.mixed(M, order = 'AOE',lower.col = COL2("BrBG"),upper.col = COL2("BrBG"))
View(luad_clinical.genes)
nb.per.onco <- luad_clinical %>%
count(known.oncogenes, name = "nb") %>%
slice_max(nb, n = 4)
luad_clinical.genes.select <- luad_clinical %>% pivot_longer(cols = c(starts_with("DUSP"), SPRY2),names_to = "SYMBOL",values_to = "expression") %>% filter(known.oncogenes%in%nb.per.onco$known.oncogenes)
ggscatter(luad_clinical.genes.select, x="expression", y="signature_MAPK", size = 0.5, add="reg.line", color = "known.oncogenes") +
theme_light() +
theme(legend.position = "right") +
facet_grid(SYMBOL~known.oncogenes) +
scale_colour_manual(values=palette.known.onco) +
stat_cor(label.y = 1) +
theme(aspect.ratio = 1)
library(ggpubr)
ggscatter(luad_clinical.genes.select, x="expression", y="signature_MAPK", size = 0.5, add="reg.line", color = "known.oncogenes") +
theme_light() +
theme(legend.position = "right") +
facet_grid(SYMBOL~known.oncogenes) +
scale_colour_manual(values=palette.known.onco) +
stat_cor(label.y = 1) +
theme(aspect.ratio = 1)
top_10 <- KRAS_DEG %>% slice_min(P.adjusted,n=10)
TCGA_KRAS_DEG_MAPK <- read.delim("~/Documents/formation_R/datasets/TCGA_KRAS_DEG_MAPK.tsv", row.names=1, stringsAsFactors=FALSE)
View(TCGA_KRAS_DEG_MAPK)
KRAS_DEG <- KRAS_DEG %>% mutate(sig=ifelse(P.adjusted<0.01 & abs(logFC)>1, "significant","no"))
TCGA_KRAS_DEG_MAPK <- KRAS_DEG %>% mutate(sig=ifelse(P.adjusted<0.01 & abs(logFC)>1, "significant","no"))
TCGA_KRAS_DEG_MAPK <- TCGA_KRAS_DEG_MAPK %>% mutate(sig=ifelse(P.adjusted<0.01 & abs(logFC)>1, "significant","no"))
top_10 <- TCGA_KRAS_DEG_MAPK %>% slice_min(P.adjusted,n=10)
ggplot(TCGA_KRAS_DEG_MAPK, aes(x=logFC, y=-log10(P.adjusted))) + theme_bw() +
geom_point(size=0.6, aes(color=sig)) +
geom_hline(yintercept = 2, linewidth=0.5, linetype="dashed") +
geom_vline(xintercept = c(-1,0,1), linewidth=0.5, linetype="dashed") +
geom_text_repel(data=top_10, aes(label=ID)) +
scale_colour_manual(values=c(significant="red", none="darkgrey")) +
labs(x="Log Fold Change") +
theme(aspect.ratio = 1)
library(ggrepel)
ggplot(TCGA_KRAS_DEG_MAPK, aes(x=logFC, y=-log10(P.adjusted))) + theme_bw() +
geom_point(size=0.6, aes(color=sig)) +
geom_hline(yintercept = 2, linewidth=0.5, linetype="dashed") +
geom_vline(xintercept = c(-1,0,1), linewidth=0.5, linetype="dashed") +
geom_text_repel(data=top_10, aes(label=ID)) +
scale_colour_manual(values=c(significant="red", none="darkgrey")) +
labs(x="Log Fold Change") +
theme(aspect.ratio = 1)
View(TCGA_KRAS_DEG_MAPK)
ggplot(TCGA_KRAS_DEG_MAPK, aes(x=logFC, y=-log10(P.adjusted))) + theme_bw() +
geom_point(size=0.6, aes(color=sig)) +
geom_hline(yintercept = 2, linewidth=0.5, linetype="dashed") +
geom_vline(xintercept = c(-1,0,1), linewidth=0.5, linetype="dashed") +
geom_text_repel(data=top_10, aes(label=rownames(TCGA_KRAS_DEG_MAPK))) +
scale_colour_manual(values=c(significant="red", none="darkgrey")) +
labs(x="Log Fold Change") +
theme(aspect.ratio = 1)
KRAS_DEG <- read.delim("~/Documents/formation_R/datasets/TCGA_KRAS_DEG_MAPK.tsv", stringsAsFactors=FALSE)
View(KRAS_DEG)
top_10 <- KRAS_DEG %>% slice_min(P.adjusted,n=10)
KRAS_DEG <- KRAS_DEG %>% mutate(sig=ifelse(P.adjusted<0.01 & abs(logFC)>1, "significant","no"))
ggplot(KRAS_DEG, aes(x=logFC, y=-log10(P.adjusted))) + theme_bw() +
geom_point(size=0.6, aes(color=sig)) +
geom_hline(yintercept = 2, linewidth=0.5, linetype="dashed") +
geom_vline(xintercept = c(-1,0,1), linewidth=0.5, linetype="dashed") +
geom_text_repel(data=top_10, aes(label=ID)) +
scale_colour_manual(values=c(significant="red", none="darkgrey")) +
labs(x="Log Fold Change") +
theme(aspect.ratio = 1)
M <- cor(luad_clinical.genes)
corrplot.mixed(M, order = 'AOE',lower.col = COL2("BrBG"),upper.col = COL2("BrBG"))
M <- cor(luad_clinical.genes)
corrplot(M, order = 'AOE',lower.col = COL2("BrBG"),upper.col = COL2("BrBG"))
M <- cor(luad_clinical.genes)
corrplot(M, order = 'AOE')
corrplot(M)
corrplot(M, type = "upper")
M <- cor(quant.features)
quant.features <- clinical %>% select(where(is.numeric) & !patient_id)
M <- cor(quant.features)
corrplot(M, method = 'square', addCoef.col = 'black', order = 'AOE', type = 'upper', diag = F, cl.pos = 'b')
corrplot(M, method = 'square', addCoef.col = 'black', order = 'AOE', type = 'upper', diag = F)
corrplot(M, method = 'square', addCoef.col = 'black', order = 'AOE', type = 'upper', diag = F, cl.pos = 'b')
corrplot(M, method = 'square',
addCoef.col = 'black',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
addCoef.col = 'black',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
order = 'AOE',
type = 'upper',
diag = T,
cl.pos = 'b')
corrplot(M,
method = 'square',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
addCoef.col = 'red',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
addCoef.col = 'black',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'circle',
addCoef.col = 'black',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
addCoef.col = 'black',
order = 'AOE',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
method = 'square',
addCoef.col = 'black',
order = 'original',
type = 'upper',
diag = F,
cl.pos = 'b')
corrplot(M,
order = 'AOE')
corrplot(M)
corrplot(M)
corrplot(M,type = "lower", diag = F)
corrplot(M,type = "upper", diag = F)
M <- cor(luad_clinical.genes)
corrplot(M,type = "upper", diag = F)
M <- cor(luad_clinical.genes)
corrplot(M,type = "upper", diag = F)
ggplot(KRAS_DEG, aes(x=logFC, y=-log10(P.adjusted))) + theme_bw() +
geom_point(size=0.6, aes(color=sig)) +
geom_hline(yintercept = 2, linewidth=0.5, linetype="dashed") +
geom_vline(xintercept = c(-1,0,1), linewidth=0.5, linetype="dashed") +
geom_text_repel(data=top_10, aes(label=ID)) +
scale_colour_manual(values=c(significant="red", none="darkgrey")) +
labs(x="Log Fold Change") +
theme(aspect.ratio = 1)
TCGA_LUAD <- read.delim("~/Documents/formation_R/datasets/TCGA_LUAD_subset.tsv", row.names=1, stringsAsFactors=FALSE)
View(TCGA_LUAD)
TCGA_LUAD %>%
filter(Purity >= 0.7) %>%
select(sampleID)
TCGA_LUAD %>%
summarise(median_Purity = median(Purity))
TCGA_LUAD %>%
group_by(pathologic_stage) %>%
summarize(
mean_purity = mean(Purity, na.rm = TRUE),
sd_purity = sd(Purity, na.rm = TRUE)
)
TCGA_LUAD %>%
slice_max(order_by = signature_MAPK, prop = 0.2, with_ties = F) %>%
select(sampleID, signature_MAPK)
1:20
seq(1,10, by =0.5)
3 -> P240_nb_rep
P240_nb_rep -> 3
TCGA_LUAD %>%
mutate(Purity_perf = case_when(
Purity > 0.6 ~ "High",
Purity >= 0.4 & Purity <= 0.6 ~ "Medium",
Purity < 0.4 ~ "Low"
)) %>%
group_by(pathologic_stage, Purity_perf) %>%
summarise(Count = n()) %>%
group_by(pathologic_stage) %>%
mutate(Percentage = Count / sum(Count) * 100)
print(TCGA_LUAD)
head(TCGA_LUAD)
head(TCGA_LUAD["Purity"])
head(TCGA_LUAD[,"Purity"])
TCGA_LUAD["TCGA.05.4249.01",]
TCGA_LUAD["TCGA.05.4249.01"]
require("knitr")
library(readr)
df_1 <- read_csv("datasets/df_1.csv")
df_2 <- read_csv("datasets/df_2.csv")
TCGA_LUAD <- read.delim("datasets/TCGA_LUAD_subset.tsv", stringsAsFactors=FALSE)
TCGA_LUAD_survival <- read.delim("datasets/TCGA_LUAD_subset_survival.tsv", stringsAsFactors=FALSE)
df_3 <- merge(df_1, df_2, by = c("id","name"))
df_4 <- merge(df_1, df_2, by = c("id","name"), all = TRUE)
TCGA_LUAD_total <- merge(TCGA_LUAD, TCGA_LUAD_survival, by = "sampleID", all = TRUE)
head(TCGA_LUAD_total)
# Install the package
install.packages("tidyverse")
# Load the library to make it accessible in you working environment
library(tidyverse)
head(clinical_data)
