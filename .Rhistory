show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(10), # choose a colour scale for your data
legend_breaks = c(-12, 0, 12), # legend customisation
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(10), # choose a colour scale for your data
legend_breaks = c(-8, 0, 8), # legend customisation
main = "Super heatmap with annotations" # a title for our heatmap
)
seq(-8,8,0.16)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(10), # choose a colour scale for your data
breaks = seq(-8,8,0.16),
legend_breaks = c(-8, 0, 8), # legend customisation
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-8,8,0.16),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-5,5,0.1),
main = "Super heatmap with annotations" # a title for our heatmap
)
colors.anno <- list(known.oncogenes=palette.known.onco,
pathologic_stage=c("Stage I"=colours()[404], "Stage II"=colours()[33], "Stage III"=colours()[35], "Stage IV"=colours()[24]),
gender=c(FEMALE=colours()[613], MALE=colours()[290]),
signature_group=c(high=colours()[124],low=colours()[144]))
# Create annotation for the rows containing the genes:
# we want to indcate the genes involved in the signature
anno.rows <- data.frame(row.names=row.names(luad_expr),in.signature=ifelse(row.names(luad_expr)%in%gene.of.interest,"yes","no"))
colors.anno$in.signature <- c(yes="black",no="white")
# center by the median the expression values per genes in order to have a nicer representation
luad_expr_c <- luad_expr - apply(luad_expr,1,median)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-5,5,0.1),
main = "Super heatmap with annotations" # a title for our heatmap
)
gene.var <- apply(luad_expr_c,1,var)
hist(gene.var)
hist(gene.var,breaks=10)
hist(gene.var,breaks=20)
sum(gene.var>5)
sum(gene.var>1)
head(gene.var)
gene.var <- sort(gene.var,decreasing=T)
head(gene.var)
gene.var <- gene.var[1:100]
luad_expr_c <- luad_expr_c[names(gene.var),]
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-5,5,0.1),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.02),
main = "Super heatmap with annotations" # a title for our heatmap
)
seq(-10,10,0.02)
seq(-10,10,0.2)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
gene.var[gene.of.interest]
gene.of.interest
head(gene.var)
luad_expr_c <- luad_expr - apply(luad_expr,1,median)
# select the top 100 highest variable genes
gene.var <- apply(luad_expr_c,1,var)
gene.var <- sort(gene.var,decreasing=T)
gene.var <- gene.var[1:500]
luad_expr_c <- luad_expr_c[names(gene.var),]
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_luad_expr_c <- luad_expr - apply(luad_expr,1,median)
# select the top 100 highest variable genes
gene.var <- apply(luad_expr_c,1,var)
luad_expr_c <- luad_expr - apply(luad_expr,1,median)
# select the top 100 highest variable genes
gene.var <- apply(luad_expr_c,1,var)
gene.var <- sort(gene.var,decreasing=T)
gene.var <- gene.var[1:200]
luad_expr_c <- luad_expr_c[names(gene.var),]
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
luad_expr_c <- luad_expr - apply(luad_expr,1,median)
# select the top 100 highest variable genes
gene.var <- apply(luad_expr_c,1,var)
gene.var <- sort(gene.var,decreasing=T)
gene.var <- gene.var[1:250]
luad_expr_c <- luad_expr_c[names(gene.var),]
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr_c,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
luad_expr <- read.table("data/TCGA_LUAD_expression.tsv",sep="\t",head=T,row=1)
luad_expr[1:6,1:6]
dim(luad_expr)
expression.selected <- luad_expr[gene.of.interest,]
# Transpose the data.frame with t()
expression.selected <- t(expression.selected)
# show the type of expression.selected
class(expression.selected)
# Transform expression.selected as data.frame
expression.selected <- as.data.frame(expression.selected)
# show the first lines of the table
head(expression.selected)
# show the type of expression.selected
class(expression.selected)
expression.selected$sampleID <- row.names(expression.selected)
expression.selected$sampleID <- row.names(expression.selected)
clinical <- merge(clinical,expression.selected, by="sampleID")
# Always verify the object you obtain
head(clinical)
ggscatter(clinical, x="DUSP6.x", y="signature_MAPK", color="known.oncogenes", size = 0.5, add="reg.line") +
theme_light() +
theme(legend.position = "right") +
facet_wrap(~known.oncogenes,ncol=4) +
stat_cor(label.y = 1) +
scale_colour_manual(values=palette.known.onco) +
theme(aspect.ratio = 1)
ggscatter(clinical, x="DUSP6.y", y="signature_MAPK", color="known.oncogenes", size = 0.5, add="reg.line") +
theme_light() +
theme(legend.position = "right") +
facet_wrap(~known.oncogenes,ncol=4) +
stat_cor(label.y = 1) +
scale_colour_manual(values=palette.known.onco) +
theme(aspect.ratio = 1)
median.signature <- median(clinical$signature_MAPK)
high.signature <- clinical$signature_MAPK >= median.signature
clinical$signature_group <- "low"
clinical$signature_group[high.signature] <- "high"
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 15, label="p.signif") +
ylim(c(0,16))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 5, label="p.signif") +
ylim(c(0,5))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(0,4))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(-4,4))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(-5,4))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(-6,4))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(-8,4))
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif") +
ylim(c(-9,4))
ggviolin(clinical, x = "signature_group", y = "ETV4", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4) +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
ggviolin(clinical, x = "signature_group", y = "ETV4", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4, scales="free") +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4, scales="free") +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
ggviolin(clinical, x = "signature_group", y = "ETV4.y", fill = "signature_group",
palette = c(high=colours()[124],low=colours()[144]),
add = "boxplot", add.params = list(fill = "white")) +
theme_light() +
theme(aspect.ratio = 1) +
facet_wrap(~known.oncogenes,ncol=4, scales="free_y") +
stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
anno.columns <- clinical[,c("known.oncogenes","pathologic_stage","gender","signature_group")]
row.names(anno.columns) <- clinical$sampleID
# For the pathological stage we want only 4 stages, we need to to remove sub categories A and B
anno.columns$pathologic_stage <- sub("[AB]$","",anno.columns$pathologic_stage)
# create a list containing the colors for each feature
colors.anno <- list(known.oncogenes=palette.known.onco,
pathologic_stage=c("Stage I"=colours()[404], "Stage II"=colours()[33], "Stage III"=colours()[35], "Stage IV"=colours()[24]),
gender=c(FEMALE=colours()[613], MALE=colours()[290]),
signature_group=c(high=colours()[124],low=colours()[144]))
# Create annotation for the rows containing the genes:
# we want to indcate the genes involved in the signature
anno.rows <- data.frame(row.names=row.names(luad_expr),in.signature=ifelse(row.names(luad_expr)%in%gene.of.interest,"yes","no"))
colors.anno$in.signature <- c(yes="black",no="white")
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-10,10,0.2),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.8),
main = "Super heatmap with annotations" # a title for our heatmap
)
range(luad_expr)
seq(-4,4,0.8)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = F, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
main = "Super heatmap with annotations" # a title for our heatmap
)
clinical <- read.table("data/TCGA_LUAD_subset.tsv",sep="\t",head=T)
head(clinical)
surv_dat <- read.table("data/TCGA_LUAD_subset_survival.tsv",sep="\t",head=T)
head(surv_dat)
luad_expr <- read.table("data/TCGA_LUAD_expression.tsv",sep="\t",head=T,row=1)
luad_expr[1:6,1:6]
median.signature <- median(clinical$signature_MAPK)
high.signature <- clinical$signature_MAPK >= median.signature
clinical$signature_group <- "low"
clinical$signature_group[high.signature] <- "high"
anno.columns <- clinical[,c("known.oncogenes","pathologic_stage","gender","signature_group")]
row.names(anno.columns) <- clinical$sampleID
# For the pathological stage we want only 4 stages, we need to to remove sub categories A and B
anno.columns$pathologic_stage <- sub("[AB]$","",anno.columns$pathologic_stage)
# create a list containing the colors for each feature
colors.anno <- list(known.oncogenes=palette.known.onco,
pathologic_stage=c("Stage I"=colours()[404], "Stage II"=colours()[33], "Stage III"=colours()[35], "Stage IV"=colours()[24]),
gender=c(FEMALE=colours()[613], MALE=colours()[290]),
signature_group=c(high=colours()[124],low=colours()[144]))
# Create annotation for the rows containing the genes:
# we want to indcate the genes involved in the signature
anno.rows <- data.frame(row.names=row.names(luad_expr),in.signature=ifelse(row.names(luad_expr)%in%gene.of.interest,"yes","no"))
colors.anno$in.signature <- c(yes="black",no="white")
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 3, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 4, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 5, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
pheatmap(luad_expr,
cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
show_colnames = F, # displaying column names
show_rownames = T, # displaying row names
clustering_distance_cols = 'correlation',
clustering_distance_rows = 'correlation',
annotation_row = anno.rows, # row (gene) annotations
annotation_col = anno.columns, # column (sample) annotations
annotation_colors = colors.anno, # colours for your annotations
clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
color = viridis::inferno(100), # choose a colour scale for your data
breaks = seq(-4,4,0.08),
cutree_cols = 6, # display column clusters
cutree_rows = 4, # display row clusters
main = "Super heatmap with annotations" # a title for our heatmap
)
