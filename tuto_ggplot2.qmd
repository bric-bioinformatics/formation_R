---
title: "ggplot2 tutorial"
format:
  html:
    code-fold: true
editor: visual
---

```{=html}
<style>
  details > summary {  
    padding: 4px;  
    width: 400px;  
    background-color: #eeeeee;  
    border: none;  
    box-shadow: 1px 1px 2px #bbbbbb;  
    cursor: pointer;
    
  }
  details > p {  
    background-color: #E0F8EC;  
    padding: 4px;  
    margin: 0;  
    box-shadow: 1px 1px 2px #bbbbbb;
  }
</style>
```
```{r, setup, echo=F, warning=FALSE,message=FALSE}
require("knitr")
library(ggplot2)
library(ggpubr)
library(corrplot)
library(pheatmap)
```

## Introduction

## Load the data

#### You first need to load the data.

Follow the procedure using the interface to load the file or try to use the function `read.table.`

<!--# Describe rows and columns -->

Clinical data: `TCGA_LUAD_subset.tsv`, name the variable `clinical`

Survival data: `TCGA_LUAD_subset_survival.tsv`, name the variable `surv_dat`

Expression data : `TCGA_LUAD_expression.tsv,` name the variable `luad_expr`

```{r}
# or you can try to adapt this code
clinical <- read.table("data/TCGA_LUAD_subset.tsv",sep="\t",head=T)
head(clinical)
surv_dat <- read.table("data/TCGA_LUAD_subset_survival.tsv",sep="\t",head=T)
head(surv_dat)
luad_expr <- read.table("data/TCGA_LUAD_expression.tsv",sep="\t",head=T,row=1)
luad_expr[1:6,1:6]

```

#### Install ggplot2 and load the library

```{r, eval=FALSE}
install.packages("ggplot2")
library(ggplot2)
```

## Display your first plot step by step

Before unfolding the code and answers boxes, try to find the solution from what we have seen in the lecture or by **searching on the web**, it should become an automatism, no one knows everything !

1.  Use the function `ggplot` alone.

```{r}
ggplot()
```

A default grey background is displayed.

2.  Display the axis: Add the data and choose the x and y axis from the column names that you can display using `colnames`. For instance, we want to evaluate the distribution of the MAPK activity signature (y-axis) in function of the known oncogenes (x-axis).

```{r}
# Display the column names
colnames(clinical)
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK))
```

<details>

<summary>Answer</summary>

The default theme displays a grey background and a white grid. We will see that is easy to change this features.

Note that the axis are automatically labelled with the column names.

</details>

3.  Display the geometric shape: **boxplot**

**Add a layer** to the plot. Which is the function to use ?

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 boxplot`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot()
```

## Customize by adding layers and modifying aesthetics

1.  Change the x-axis labels: we want to make it prettier: e.g Known Oncogenes and the y-axis to make it more explicit: e.g MAPK activity signature

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot() + 
  labs(x="Known Oncogenes", y="MAPK activity signature")
```

2.  Change the global theme to have a white background more suitable for figures and projection

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 theme white background`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot() + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw()
```

3.  Change the color and fill of the boxplots

-   All the boxplots in red and filled with grey. You can search for how colors are named in R if you want to try your favorite colors. Many palettes are available through dedicated packages. (My favorite function to call for colors is `colours()` systematically installed and loaded with R, you can try some of my preferred ones: `colours()[124]`, `colours()[613]`, `colours()[53]`, `colours()[144]`).

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 colors`

```{r}
# the fonction colours() returns the name of the color
colours()[124]
# use the function c() to concat several elements, we call it a vector
c(colours()[613], colours()[53], colours()[144]) 
```

-   `R ggplot2 boxplot color`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(color="red", fill="grey") +
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw()
```

You can play globally on the color of the borders (parameter `color`), the filling (parameter `fill`), the transparency (parameter `alpha`)) and more. The accessible aesthetics can vary according to the geometric shape, form. instance for lines you will have the width and the type.

4.  Change the color of the boxplots in function of the known oncogenes

-   During the previous step the same colors have been applied to all boxplots, the goal here is to use the information contained in a column of our dataset (`known.oncogenes`). This is part of the aesthetics. Based on the current code, how would you add this information (2 possibilities) ?

***Option 1***

```{r, eval=F}
# Directly in the aesthetics of the ggplot function that will be accessible for all
# layers
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK, color=known.oncogenes)) + # Add the new aesthetics color
  geom_boxplot() + # remove the global colors
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw()
```

***Option 2***

```{r}
# Within the geom_boxplot() function which will define the aesthetics 
# with aes() only for this layer
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw()
```

-   By default the colors are not very contrasted ... you can customize them by i) defining your own palette optionally by **attributing a color to each category** ; ii) find a predefined palette to help you to define the colors. To do this task, you will need to add a new layer by using a function that help in **scaling the colors manually**.

i\) To define your own palette, you need to concatenate as many colors as the number of categories, here 12 colors. You can assign the colors to the categories by building a **named vector**.

```{r}
# We use the function c(), to name the elements of a vector you use the name you want
# and you assign the values with the sign =
palette.known.onco <- c(ALK="darkgrey",
                        BRAF_act=colours()[613],
                        BRAF.non=colours()[11],
                        EGFR=colours()[128],
                        ERBB2=colours()[76],
                        MAP2K1=colours()[509],
                        MET=colours()[121],
                        NF1=colours()[468],
                        None=colours()[92],
                        RIT1=colours()[642],
                        ROS1=colours()[34],
                        KRAS="black")
# Display the content
palette.known.onco
```

Now you have your colors, add the layer to the ggplot object and use the variable `palette.known.onco` you just created.

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 scaling color manually`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco)
```

ii\) R natively provides a few continuous color palettes which means that you do not need to install and load any library. Also when you install `ggplot2`, it installs some dependencies (packages that `ggplot2` needs to work properly), among them it installs the packages `RColorBrewer`, `viridis`, `paletteer`, `khroma` etc. and have implemented specific functions to use the palettes, it means that those packages are installed but not loaded. You can see which functions are available when typing `scale_color_` on RStudio. If you want to use the functions from these packages you need to load the package but it is not mandatory. Finally, a lot more palettes are available through packages.

***Native palettes***

```{r}
# rainbow, heat.colors, terrain.colors, topo.colors, cm.colors
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=terrain.colors(12))
```

***Viridis palettes***

```{r}
# options: viridis, magma, plasma, inferno, cividis
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_viridis_d(option="inferno")
```

5.  Customize **theme** elements by **rotating** the **x-axis labels** by 45Â°

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 rotate x axis labels`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_viridis_d(option="inferno") +
  theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
```

6.  Flip the plot to get horizontal boxplots

There is two ways, the first one is very simple and consists in inverting x and y aesthetics, the second one involves the **addition** of a new layer to **flip the axis** (preferred option and it provides more flexibility). Lets keep our own color palette `palette.known.onco`

***Option 1***

```{r, eval=F}
ggplot(data = clinical, aes(y=known.oncogenes, x=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco)
```

***Option 2***

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 flip axis`

</details>

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip()
```

7.  Add another geometric shape: points

This task consist of **adding a new layer** containing the points colored by known oncogenes. Which function should we use ? Note that there are two answers but one is more suitable for boxplot as it is adding some random noise to the positions in order to avoid overlaps.

<details>

<summary>Key words to write on your favorite browser</summary>

-   `R ggplot2 point`
-   `R ggplot2 point boxplot`

</details>

***Option 1***

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip() +
  geom_point(aes(color=known.oncogenes))
```

***Option 2***

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip() +
  geom_jitter(aes(color=known.oncogenes))
```

8.  Try to change the **shape** in plain triangle for all points and decrease **opacity** by half and to manage the **size** according to the tumor purity (column `Purity`).

```{r}
ggplot(data = clinical, aes(x=known.oncogenes, y=signature_MAPK)) +
  geom_boxplot(aes(color=known.oncogenes)) + 
  labs(x="Known Oncogenes", y="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip() +
  geom_jitter(aes(color=known.oncogenes, size=Purity), shape=17, alpha=0.5)
```

## Create a density plot

Your goal is to produce the following density plot showing the **density distributions** of the MAPK signature in function of the known oncogenes (use `palette.known.onco`). Here we introduce the customization of the plot dimensions, we want to force the plot to have be x-axis 2 times longer than the y-axis which we call the **aspect ratio**. Thanks to it, you can force to have squared plots for instance.

```{r, echo=FALSE}
ggplot(data = clinical, aes(x=signature_MAPK)) +
  geom_density(aes(color=known.oncogenes)) + 
  labs(x="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  theme(aspect.ratio = 1/2)
```

1.  Identify what contain the axis.

<details>

<summary>Answer</summary>

The x-axis contains the value of the column `signature_MAPK` and the y-axis indicates the density of the distribution, the y-axis do not need to be specified.

</details>

2.  Make a list of the aesthetics you need to modify and layers that need to be added.

<details>

<summary>Answer</summary>

-   layers: the geometric shape, label of the x-axis, theme background, theme aspect ratio, custom color palette

-   aesthetics: x-axis , color of the lines

</details>

3.  Write your code ! (Do not forget your best friend: the Web)

```{r, eval=F}
ggplot(data = clinical, aes(x=signature_MAPK)) +
  geom_density(aes(color=known.oncogenes)) + 
  labs(x="MAPK activity signature") +
  theme_bw() +
  scale_colour_manual(values=palette.known.onco) +
  theme(aspect.ratio = 1/3)
```

## Create a bar plot

Your goal is to produce the following **bar plot** showing the number of tumor from genders (column `gender` - play with the **transparency**) harboring each known oncogene. In this case the **aspect ratio** is inverse compared to the previous one.

```{r, echo=FALSE, warning=F, message=F}
ggplot(data = clinical, aes(x=known.oncogenes)) +
  geom_bar(aes(fill=known.oncogenes, color=known.oncogenes,alpha=gender)) + 
  labs(x="Known Oncogenes") +
  theme_bw() +
  scale_fill_manual(values=palette.known.onco) +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip() +
  theme(aspect.ratio = 2)
```

1.  Identify what contain the axis.

<details>

<summary>Answer</summary>

The x-axis indicates the number of sample harboring the known oncogene, the x-axis do not need to be specified. The y-axis indicates the known oncogenes. As a reminder, one would prefer to flip the coordinates but it is not mandatory.

</details>

2.  Make a list of the aesthetics you need to modify and layers that need to be added.

<details>

<summary>Answer</summary>

-   layers: the geometric shape, label of the y-axis, theme background, theme aspect ratio, custom color palette

-   aesthetics: y-axis , color of the lines, fill of the bars, transparency according to gender

</details>

3.  Write your code ! (Do not forget your best friend: the Web)

```{r, eval=F}
ggplot(data = clinical, aes(x=known.oncogenes)) +
  geom_bar(aes(fill=known.oncogenes, color=known.oncogenes,alpha=gender)) + 
  labs(x="Known Oncogenes") +
  theme_bw() +
  scale_fill_manual(values=palette.known.onco) +
  scale_colour_manual(values=palette.known.onco) +
  coord_flip() +
  theme(aspect.ratio = 2)
```

## Display expression data

The goal of this section is to manipulate the expression (`luad_expr`) and clinical datasets (`clinical`) by filtering for patients harboring specific known oncogene, having extreme MAPK activity signal. We want to observe the correlation between the signature and the genes that were used to compute it: ETV4, ETV5, DUSP6, DUSP4 and SPRY2. We will use scatter plots (basically visualizing samples with points), linear regression estimation and a heatmap using the package `corrplot`. The expression dataset was subset by filtering for genes involved from closer or farther to MAPK signalling. We will operate a clustering of the samples and genes and visualize the expression of the genes using a heatmap that we will annotate using the package `pheatmap`.

#### Prepare the data

1.  Join the clinical annotations with the expression of the MAPK signature genes.

The best way to complete this task is to i) filter for our genes of interest by declaring a variable named `gene.of.interest` containing a vector with the gene symbols and ii) **transpose** (flip columns and rows) the expression table (`luad_expr`). The function allowing this operation return a object of type `matrix` , this type is not suitable for ggplot and not convenient for easy manipulation. We need to transform it in **`data.frame`** format. iii) Create a column `sampleID` containing the sample identifiers present as **row names**. iv) Merge the 2 `data.frame`s.

Note: In R, if possible, you can transform the type of variables using functions starting with `as.` followed by the desired format. For instance you have a character string `"42"` that you want to transform in numeric, you can run `as.numeric("42")`.

i\) Create `gene.of.interest` containing the genes and filter for the rows containing the expression of these genes by creating a new variable `expression.selected`

```{r}
# Create a vector of characters using c()
gene.of.interest <- c("ETV4", "ETV5", "DUSP6", "SPRY2","DUSP4")
# The gene symbols are the row names, then the gene of interest are used as indices
expression.selected <- luad_expr[gene.of.interest,]
```

ii\) Transpose the data.frame `expression.selected`

```{r}
# Transpose the data.frame with t()
expression.selected <- t(expression.selected)
# show the type of expression.selected
class(expression.selected)
# Transform expression.selected as data.frame 
expression.selected <- as.data.frame(expression.selected)
# show the first lines of the table
head(expression.selected)
# show the type of expression.selected
class(expression.selected)
```

iii\) Create a column `sampleID` in the `data.frame` `expression.selected` containing the sample identifiers that are present in the row names

```{r}
expression.selected$sampleID <- row.names(expression.selected)
```

iv\) Merge `expression.selected` and `clinical`

```{r}
clinical <- merge(clinical,expression.selected, by="sampleID")
# Always verify the object you obtain 
head(clinical)
```

#### What are this plot ?

Analyse the following code chunks, comment all the layers of each plot, which plots would you expect ? What do you need to be able to run these codes. Ask the web or chatGPT !

***Plot 1***

```{r, eval=F}
ggscatter(clinical, x="DUSP6", y="signature_MAPK", color="known.oncogenes", size = 0.5, add="reg.line") +
  theme_light() +
  theme(legend.position = "right") +
  facet_wrap(~known.oncogenes,ncol=4) +
  stat_cor(label.y = 1) +
  scale_colour_manual(values=palette.known.onco) +
  theme(aspect.ratio = 1)
```

***Plot 2***

Comment also the lines before the plot.

```{r, eval=F}
median.signature <- median(clinical$signature_MAPK)
high.signature <- clinical$signature_MAPK >= median.signature
clinical$signature_group <- "low"
clinical$signature_group[high.signature] <- "high"

ggviolin(clinical, x = "signature_group", y = "ETV4", fill = "signature_group", 
         palette = c(high=colours()[124],low=colours()[144]),
         add = "boxplot", add.params = list(fill = "white")) +
  theme_light() +
  theme(aspect.ratio = 1) +
  facet_wrap(~known.oncogenes,ncol=4, scales="free_y") +
  stat_compare_means(comparisons = list(c("high","low")), method="wilcox", label.y = 3, label="p.signif")
```

#### Correlation plot

We want to analyse the correlation between the genes of the MAPK activity signature. To this end, we need to **install** and **load** the `corrplot` package. You will use the table stored in `expression.selected`, you need to remove the column containing the sample IDs and compute the correlation between the columns and store the result in a variable.

```{r}
expression.selected$sampleID <- NULL
```

You have a very nice introduction to this package: <https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html>. All the informations are in this page but don't hesitate to search for more.

You want to obtain the following plot:

```{r, echo=F}
M <- cor(expression.selected) 
corrplot(M, addCoef.col = 'black', order = 'AOE', col = COL2('PiYG'), tl.pos = 'd', cl.pos = 'b')
```

Here is the solution:

```{r, eval=F}
# install the package that is in CRAN repository
install.packages("corrplot")
# load the library
library(corrplot)
# compute the correlation, by default it compute the correlation between columns
M <- cor(expression.selected) 
# the plot !
corrplot(M, addCoef.col = 'black', order = 'AOE', col = COL2('PiYG'), tl.pos = 'd', cl.pos = 'b')
```

#### Heatmap

```{r, echo=F}
## Prepare the data
# annotation of the columns that contains sample informations
# We want to show the oncogenes, the gender and the pathological stage and the 
# MAPH signature groups
# the data frame must contain row names corresponding to the sample IDs and identical to the sample IDs in the expression data.
# We create a data.frame with the relevant columns
anno.columns <- clinical[,c("known.oncogenes","pathologic_stage","gender","signature_group")]
row.names(anno.columns) <- clinical$sampleID
# For the pathological stage we want only 4 stages, we need to to remove sub categories A and B
anno.columns$pathologic_stage <- sub("[AB]$","",anno.columns$pathologic_stage)
# create a list containing the colors for each feature
colors.anno <- list(known.oncogenes=palette.known.onco,
                       pathologic_stage=c("Stage I"=colours()[404], "Stage II"=colours()[33], "Stage III"=colours()[35], "Stage IV"=colours()[24]),
                       gender=c(FEMALE=colours()[613], MALE=colours()[290]),
                       signature_group=c(high=colours()[124],low=colours()[144]))
# Create annotation for the rows containing the genes: 
# we want to indcate the genes involved in the signature
anno.rows <- data.frame(row.names=row.names(luad_expr),in.signature=ifelse(row.names(luad_expr)%in%gene.of.interest,"yes","no"))
colors.anno$in.signature <- c(yes="black",no="white")

pheatmap(luad_expr,
         cluster_rows = T, cluster_cols = T, # set to FALSE if you want to remove the dendograms
         show_colnames = F, # displaying column names
         show_rownames = T, # displaying row names
         clustering_distance_cols = 'correlation',
         clustering_distance_rows = 'correlation',
         annotation_row = anno.rows, # row (gene) annotations
         annotation_col = anno.columns, # column (sample) annotations
         annotation_colors = colors.anno, # colours for your annotations
         clustering_method = 'ward.D', # how to aggregate rows and columns depending on their distance
         color = viridis::inferno(100), # choose a colour scale for your data
         breaks = seq(-4,4,0.08),
         cutree_cols = 6, # display column clusters
         cutree_rows = 4, # display row clusters
         main = "Super heatmap with annotations" # a title for our heatmap
         )
```

## Create a KM plot

survival

ggsurvfit

## Some useful links

-   <https://ggplot2.tidyverse.org/index.html>

-   <https://ggplot2.tidyverse.org/reference/ggtheme.html>

-   <http://www.sthda.com/english/wiki/ggplot2-themes-and-background-colors-the-3-elements>

-   <https://r-graph-gallery.com/>

-   <https://www.cedricscherer.com/2019/08/05/a-ggplot2-tutorial-for-beautiful-plotting-in-r/>

-   <https://r-graph-gallery.com/ggplot2-color.html>

-   [https://larmarange.github.io/analyse-R/couleurs.html](https://larmarange.github.io/analyse-R/couleurs.html#ggsci)

-   <https://www.emilyzabor.com/tutorials/survival_analysis_in_r_tutorial.html>

-   <https://cran.r-project.org/web/packages/corrplot/vignettes/corrplot-intro.html>

-   <https://biostatsquid.com/step-by-step-heatmap-tutorial-with-pheatmap/>
